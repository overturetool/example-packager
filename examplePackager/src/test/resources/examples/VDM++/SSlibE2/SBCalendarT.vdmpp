class SBCalendarT is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[
	new SBCalendarT06(),
	new SBCalendarT05(),
	new SBCalendarT04(),
	new SBCalendarT03(),
	new SBCalendarT02(),
	new SBCalendarT01()
	];
end SBCalendarT

class SBCalendarT01 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new SBCalendar()	in
	(
	c.setTodayOnBusiness(c.getDateFrom_yyyy_mm_dd(2001,9,12));
	c.setSystemTime(new Time(c, 2003, 10, 23, 13, 12, 34, 567));
	return
		(
		--c.maxDate().EQ(c.getDateFrom_yyyy_mm_dd(9999,12,31)) and
		--c.maxDate().date2Str = c.dateの最大値 and
		c.todayOnBusiness().EQ(c.getDateFrom_yyyy_mm_dd(2001,9,12)) and
		c.isDateNil(nil) = true and
		--c.isDateNil(c.maxDate()) = true and
		c.isDateNil(c.todayOnBusiness()) = false and
		c.systemDate().EQ(c.today()) and
		c.systemTime().EQ(new Time(c, 2003, 10, 23, 13, 12, 34, 567))
		)
	)
;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT01:\tTest maxDate and date is nil.";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT01

class SBCalendarT02 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new SBCalendar(),
		setOfDayOff = jc.getSetOfDayOff(2001),
		setOfDayOff2006 = jc.getSetOfDayOff(2006),
		d0401 = jc.getDateFromString("20010401"),
		d0408 = jc.getDateFromString("20010408"),
		d0430 = jc.getDateFromString("20010430"),
		setOfDayOffBy_yyyy_mm_dd =  {jc.getYyyymmdd(dayOff) | dayOff in set setOfDayOff}	,
		setOfDayOffBy_yyyy_mm_dd2006 =  {jc.getYyyymmdd(dayOff) | dayOff in set setOfDayOff2006}	in
	return
		setOfDayOffBy_yyyy_mm_dd = 
			{ mk_( 2001,1,1 ),
			  mk_( 2001,1,2 ),
			  mk_( 2001,1,3 ),
			  mk_( 2001,1,6 ),
			  mk_( 2001,1,8 ),
			  mk_( 2001,1,13 ),
			  mk_( 2001,1,20 ),
			  mk_( 2001,1,27 ),
			  mk_( 2001,2,3 ),
			  mk_( 2001,2,10 ),
			  mk_( 2001,2,11 ),
			  mk_( 2001,2,12 ),
			  mk_( 2001,2,17 ),
			  mk_( 2001,2,24 ),
			  mk_( 2001,3,3 ),
			  mk_( 2001,3,10 ),
			  mk_( 2001,3,17 ),
			  mk_( 2001,3,20 ),
			  mk_( 2001,3,24 ),
			  mk_( 2001,3,31 ),
			  mk_( 2001,4,7 ),
			  mk_( 2001,4,14 ),
			  mk_( 2001,4,21 ),
			  mk_( 2001,4,28 ),
			  mk_( 2001,4,29 ),
			  mk_( 2001,4,30 ),
			  mk_( 2001,5,3 ),
			  mk_( 2001,5,4 ),
			  mk_( 2001,5,5 ),
			  mk_( 2001,5,12 ),
			  mk_( 2001,5,19 ),
			  mk_( 2001,5,26 ),
			  mk_( 2001,6,2 ),
			  mk_( 2001,6,9 ),
			  mk_( 2001,6,16 ),
			  mk_( 2001,6,23 ),
			  mk_( 2001,6,30 ),
			  mk_( 2001,7,7 ),
			  mk_( 2001,7,14 ),
			  mk_( 2001,7,20 ),
			  mk_( 2001,7,21 ),
			  mk_( 2001,7,28 ),
			  mk_( 2001,8,4 ),
			  mk_( 2001,8,11 ),
			  mk_( 2001,8,18 ),
			  mk_( 2001,8,25 ),
			  mk_( 2001,9,1 ),
			  mk_( 2001,9,8 ),
			  mk_( 2001,9,15 ),
			  mk_( 2001,9,22 ),
			  mk_( 2001,9,23 ),
			  mk_( 2001,9,24 ),
			  mk_( 2001,9,29 ),
			  mk_( 2001,10,6 ),
			  mk_( 2001,10,8 ),
			  mk_( 2001,10,13 ),
			  mk_( 2001,10,20 ),
			  mk_( 2001,10,27 ),
			  mk_( 2001,11,3 ),
			  mk_( 2001,11,10 ),
			  mk_( 2001,11,17 ),
			  mk_( 2001,11,23 ),
			  mk_( 2001,11,24 ),
			  mk_( 2001,12,1 ),
			  mk_( 2001,12,8 ),
			  mk_( 2001,12,15 ),
			  mk_( 2001,12,22 ),
			  mk_( 2001,12,23 ),
			  mk_( 2001,12,24 ),
			  mk_( 2001,12,29 ),
			  mk_( 2001,12,30 ),
			 mk_( 2001,12,31 ) } and
  		setOfDayOffBy_yyyy_mm_dd2006 =
			{ mk_( 2006,1,1 ),
			  mk_( 2006,1,2 ),
			  mk_( 2006,1,3 ),
			  mk_( 2006,1,7 ),
			  mk_( 2006,1,9 ),
			  mk_( 2006,1,14 ),
			  mk_( 2006,1,21 ),
			  mk_( 2006,1,28 ),
			  mk_( 2006,2,4 ),
			  mk_( 2006,2,11 ),
			  mk_( 2006,2,18 ),
			  mk_( 2006,2,25 ),
			  mk_( 2006,3,4 ),
			  mk_( 2006,3,11 ),
			  mk_( 2006,3,18 ),
			  mk_( 2006,3,21 ),
			  mk_( 2006,3,25 ),
			  mk_( 2006,4,1 ),
			  mk_( 2006,4,8 ),
			  mk_( 2006,4,15 ),
			  mk_( 2006,4,22 ),
			  mk_( 2006,4,29 ),
			  mk_( 2006,5,3 ),
			  mk_( 2006,5,4 ),
			  mk_( 2006,5,5 ),
			  mk_( 2006,5,6 ),
			  mk_( 2006,5,13 ),
			  mk_( 2006,5,20 ),
			  mk_( 2006,5,27 ),
			  mk_( 2006,6,3 ),
			  mk_( 2006,6,10 ),
			  mk_( 2006,6,17 ),
			  mk_( 2006,6,24 ),
			  mk_( 2006,7,1 ),
			  mk_( 2006,7,8 ),
			  mk_( 2006,7,15 ),
			  mk_( 2006,7,17 ),
			  mk_( 2006,7,22 ),
			  mk_( 2006,7,29 ),
			  mk_( 2006,8,5 ),
			  mk_( 2006,8,12 ),
			  mk_( 2006,8,19 ),
			  mk_( 2006,8,26 ),
			  mk_( 2006,9,2 ),
			  mk_( 2006,9,9 ),
			  mk_( 2006,9,16 ),
			  mk_( 2006,9,18 ),
			  mk_( 2006,9,23 ),
			  mk_( 2006,9,30 ),
			  mk_( 2006,10,7 ),
			  mk_( 2006,10,9 ),
			  mk_( 2006,10,14 ),
			  mk_( 2006,10,21 ),
			  mk_( 2006,10,28 ),
			  mk_( 2006,11,3 ),
			  mk_( 2006,11,4 ),
			  mk_( 2006,11,11 ),
			  mk_( 2006,11,18 ),
			  mk_( 2006,11,23 ),
			  mk_( 2006,11,25 ),
			  mk_( 2006,12,2 ),
			  mk_( 2006,12,9 ),
			  mk_( 2006,12,16 ),
			  mk_( 2006,12,23 ),
			  mk_( 2006,12,29 ),
			  mk_( 2006,12,30 ),
			  mk_( 2006,12,31 ) } and
  		jc.getDayOffsExceptSunday(d0401,d0430)  = 6 and
  		card jc.getDayOffsAndSunday(d0401,d0430) = 1 and
  		jc.getDayOffsAndSunday(d0401,d0408) = {}
	;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT02:\tGetting set of day off.";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT02

class SBCalendarT03 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new SBCalendar()	in
	(
	c.setTodayOnBusiness(c.getDateFrom_yyyy_mm_dd(2001,9,12));
	return
		(
		c.getExerciseDate("200111").EQ(c.getDateFrom_yyyy_mm_dd(2001,11,9))  and
		c.getExerciseDate("200109").EQ(c.getDateFrom_yyyy_mm_dd(2001,9,14))  and
		c.isCorrectContractMonth("200206") = true and
		c.isCorrectContractMonth("200206.01") = false and
		c.isCorrectContractMonth("Shin Sahara") = false 
		)
	)
;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT03:\tTest validity checking of contract month and getting execution date.";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT03

class SBCalendarT04 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new SBCalendar(),
		d0929 = c.getDateFrom_yyyy_mm_dd(2001, 9, 29),
		d0104 = c.getDateFrom_yyyy_mm_dd(20021, 1, 4)	in
	(
	c.setTodayOnCompany("007",d0104);
	c.setTodayOnCompany("009",d0929);
	return
		(
		c.todayOnCompany("007") = d0104 and
		c.todayOnCompany("009") = d0929 
		)
	)
;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT04:\tTest of todayOnCompany";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT04

class SBCalendarT05 is subclass of TestCase, CalendarDefinition
operations 
protected test: () ==> bool
test() == 
	let	c = new SBCalendar()
	in
	return
		c.todayOnBusiness().EQ(c.getDateFrom_yyyy_mm_dd(2003, 10, 24)) and
		c.readFromFiletodayOnBusiness(homedir ^ "/temp/Today.txt").EQ(c.getDateFrom_yyyy_mm_dd(2001, 3, 1))
;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT05:\tTest todayOnBusiness from a file.";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT05

class SBCalendarT06 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new SBCalendar(),
		sDate = SBCalendar`getContractDate
	in
	return
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 1, 5)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 7, 5)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 1, 31)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 7, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 2, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 7, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 2, 2)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 8, 2)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 2, 27)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 8, 27)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 3, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 9, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 3, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 9, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 3, 31)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 9, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 4, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 10, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 4, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 10, 29)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 5, 6)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 11, 5)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 5, 7)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 11, 5)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 5, 10)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 11, 10)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 6, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 6, 28)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 6, 29)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 6, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 7, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 7, 2)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 12, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 7, 5)).EQ(c.getDateFrom_yyyy_mm_dd(2005, 1, 5)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2004, 7, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2005, 1, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 8, 2)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 2, 2)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 8, 28)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 2, 27)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 8, 29)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 2, 27)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 9, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 3, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 9, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 3, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 10, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 4, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 10, 29)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 4, 28))  and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 11, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 4, 30)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 11, 30)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 5, 28)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 12, 1)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 6, 1)) and
		sDate(c.getDateFrom_yyyy_mm_dd(2003, 12, 26)).EQ(c.getDateFrom_yyyy_mm_dd(2004, 6, 25))
;
protected setUp: () ==> ()
setUp() == TestName := "SBCalendarT06:\tGetting contract date of margin trading.";
protected tearDown: () ==> ()
tearDown() == return;
end SBCalendarT06