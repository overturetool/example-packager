<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <packaging>pom</packaging>

  <groupId>org.overture.build</groupId>
  <artifactId>root</artifactId>
  <version>2.0.2</version>
  <name>Overture Example Packager superpom</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <github.global.server>github</github.global.server>
    <staging.repo.target>${project.build.directory}/mvn-staging-repo</staging.repo.target>
  </properties>

  <!--
      The setup to publish to an ad hoc mvn repo on GitHub is based on
      the stackoverflow answer at
      http://stackoverflow.com/a/14013645/753029
  -->
  <distributionManagement>
    <repository>
      <id>mvn-repo-staging</id>
      <name>Temporary Staging Repository</name>
      <!-- This value will change in submodules depending on the value of ${staging.repo.target}. -->
      <url>file://${staging.repo.target}</url>
    </repository>
  </distributionManagement>

  <dependencies>
    <!-- Add JUnit for testing -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>

    <plugins>
      <plugin>
        <!--
            This plugin allows you to run

            $ mvn versions:set -DnewVersion=2.0.2

            and get all the maven version numbers updated nearly for
            free.  The tycho bit on the end just tells tycho (used in
            the eclipse plugin build) to piss off.

            Don't forget to update all of the MANFEST.MF, feature.xml,
            and symphony.product version numbers as well.  See
            tools/build/update-versions.sh.

            More details on the versions-maven-plugin are at
            http://mojo.codehaus.org/versions-maven-plugin/
        -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <configuration>
          <!-- Version control obviates the need for this. -->
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
    </plugins>

    <!-- Configuration of plugins for inheriting pom.xml files should
         be in the pluginManagement tag
    -->
    <pluginManagement>
      <plugins>
        <!-- Configure the compiler for all Overture Projects -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.0</version>
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>

        <!-- Attatch sources to all installed jars -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>2.2.1</version>
          <!-- <executions> -->
          <!--   <execution> -->
          <!--     <id>attach-sources</id> -->
          <!--     <goals> -->
          <!--       <goal>jar</goal> -->
          <!--     </goals> -->
          <!--   </execution> -->
          <!-- </executions> -->
          <configuration>
            <attach>true</attach>
          </configuration>
        </plugin>

        <!-- Enable JavaDoc but dont fail on error. This must be disabled for
             the Eclipse project in the IDE -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>2.9</version>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <failOnError>false</failOnError>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.6</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.13</version>
          <configuration>
            <testFailureIgnore>true</testFailureIgnore>
	    <!-- required for java7 to avoid verifier errors-->
	    <argLine>-XX:-UseSplitVerifier -Djava.awt.headless=true</argLine>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.6</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.4</version>
          <configuration>
            <descriptorRefs>
              <descriptorRef>jar-with-dependencies</descriptorRef>
            </descriptorRefs>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.4</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>2.5</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>3.2</version>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>2.1</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-ssh</artifactId>
        <version>2.4</version>
      </extension>
    </extensions>
  </build>

  <profiles>
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <modules>
        <module>core</module>
        <module>plugin</module>
      </modules>
    </profile>

    <profile>
      <!-- See the comment above about publishing to ad hoc mvn repos. -->
      <id>dev-repo</id>
      <build>
        <defaultGoal>com.github.github:site-maven-plugin:site</defaultGoal>
        <plugins>
          <plugin>
            <groupId>com.github.github</groupId>
            <artifactId>site-maven-plugin</artifactId>
            <version>0.9</version>
            <configuration>
              <message>Maven artifacts for ${project.version}</message>
              <outputDirectory>${project.build.directory}/mvn-staging-repo</outputDirectory>
              <branch>refs/heads/mvn-dev-repo</branch>
              <includes><include>**/*</include></includes>
              <repositoryOwner>overturetool</repositoryOwner>
              <repositoryName>example-packager</repositoryName>
              <merge>true</merge>
              <noJekyll>true</noJekyll>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <organization>
    <name>Overture</name>
    <url>http://www.overturetool.org</url>
  </organization>
</project>
